When would you want to use a remote repository rather than keeping
all your work local?

Using a remote repository would be very useful in situations where you
may be using multiple computers or where there are several people working
on the same project. This way, everyone/all computers may access the most
up to date version of the project.

Why might you want to always pull changes manually rather than having
Git automatically stay up-to-date with your remote repository?

Considering the fact that multiple people may be working on one project,
it makes sense that remote repositories use a manual update rather
than an automatic one - perhaps you need to collaborate with your partner
before accepting their changes.

Describe the differences between forks, clones, and branches. When
would you use one instead of another?

A branch is a part of a single file or repository. A clone is a copy
of a repository, perhaps in a different location. A fork is a clone
but is specifically on GitHub and it contains a link to the original,
which is usually created by someone else. If you choose to edit a fork
on your own computer (not on GitHub) you must create a clone because
forks only exist on GitHub.

What is the benefit of having a copy of the last known state of the
remote stored locally?

The benefits of this are that you can compare your local version
of the repository with the updated remote version offline. You do not
need to accept the changes of the remote copy if you simply store the
remote copy.

How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

To collaborate without using either of these, you would need to manually
send your partners each change and updated version, by email or other-
wise. The easier part would be that you would be communicating with your
partner(s) to a much greater extent, which can be really helpful when
collaborating. However, Git and GitHub are designed for version control,
and GitHub especially designed for collaborative version control, so the
abilities that you have with it (such as pull requests) make using Git and
GitHub the better option, in my opinion.

When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

You definitely want to make changes in a separate branch if you are
collaborating with someone else on a project because you do not want
to interrupt anyone else's workflow. Additionally, you should use a
separate branch if you want to try adding an experimental feature but
don't want to mess up your whole project. When you are not collaborating
or creating an experimental feature, however, it is generally better
(as far as I can tell) to make changes directly to master (unless it's
something like the "easy-mode" also!) because your commits to master
are much less complicated to make and push/pull.